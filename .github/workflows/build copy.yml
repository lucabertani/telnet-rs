name: Build BK

on:
  workflow_dispatch:
  pull_request:

permissions:
  contents: write

jobs:
  build-and-upload:
    name: Build and upload
    strategy:
      matrix:
        platform:
          #- os-name: FreeBSD-x86_64
          #  runs-on: ubuntu-24.04
          #  target: x86_64-unknown-freebsd
          #  executable-name: telnet

          - os-name: Linux-x86_64
            runs-on: ubuntu-24.04
            target: x86_64-unknown-linux-musl
            #executable-name: telnet

          - os-name: Linux-aarch64
            runs-on: ubuntu-24.04
            target: aarch64-unknown-linux-musl
            #executable-name: telnet

          #- os-name: Linux-riscv64
          #  runs-on: ubuntu-24.04
          #  target: riscv64gc-unknown-linux-gnu
          #  executable-name: telnet

          - os-name: Windows-x86_64
            runs-on: windows-latest
            target: x86_64-pc-windows-msvc
            #executable-name: telnet

          #- os-name: macOS-x86_64
          #  runs-on: macOS-latest
          #  target: x86_64-apple-darwin
          #  executable-name: telnet.exe
    
    runs-on: ${{ matrix.platform.runs-on }}

    steps:
      - name: Checkout
        uses: actions/checkout@v3
      
      - name: Get the release version from the tag
        shell: bash
        run: echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_ENV

      # - name: Install Rust
      #   # Or @nightly if you want
      #   uses: dtolnay/rust-toolchain@stable
      #   # Arguments to pass in
      #   with:
      #     # Make Rust compile to our target (defined in the matrix)
      #     targets: ${{ matrix.target }}

      # - name: Build
      #   uses: actions-rs/cargo@v1
      #   with:
      #     use-cross: true
      #     command: build
      #     args: --verbose --release --target ${{ matrix.target }}

      - name: Generate Release Tag
        id: tag
        run: |
          echo "::set-output name=release_tag::$(date +"%Y.%m.%d")"
          echo "::set-output name=release_date::$(date +"%Y.%m.%d")"

      - name: Build binary
        uses: houseabsolute/actions-rust-cross@v1
        with:
          command: build
          target: ${{ matrix.platform.target }}
          args: "--locked --release"
          strip: true
      
      - name: Publish artifacts and release
        uses: houseabsolute/actions-rust-release@v0
        with:
          executable-name: telnet-rs
          target: ${{ matrix.platform.target }}
          action-gh-release-parameters: |
            {
                "repository": "lucabertani/telnet-rs",
                "token": "${{ secrets.ACTIONS_RUST_RELEASE_TESTING_TOKEN }}",
                "name": "${{ steps.tag.outputs.release_date }} Telnet rs",
                "tag_name": "${{ steps.tag.outputs.release_tag }}"
            }

      # - name: Build archive
      #   shell: bash
      #   run: |
      #     # Replace with the name of your binary
      #     binary_name="telnet"
# 
      #     dirname="$binary_name-${{ env.VERSION }}-${{ matrix.target }}"
      #     mkdir "$dirname"
      #     if [ "${{ matrix.os }}" = "windows-latest" ]; then
      #       mv "target/${{ matrix.target }}/release/$binary_name.exe" "$dirname"
      #     else
      #       mv "target/${{ matrix.target }}/release/$binary_name" "$dirname"
      #     fi
# 
      #     if [ "${{ matrix.os }}" = "windows-latest" ]; then
      #       7z a "$dirname.zip" "$dirname"
      #       echo "ASSET=$dirname.zip" >> $GITHUB_ENV
      #     else
      #       tar -czf "$dirname.tar.gz" "$dirname"
      #       echo "ASSET=$dirname.tar.gz" >> $GITHUB_ENV
      #     fi
# 
      # - name: Release
      #   uses: softprops/action-gh-release@v1
      #   with:
      #     files: |
      #       ${{ env.ASSET }}