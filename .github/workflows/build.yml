name: Rust Release

on:
  workflow_dispatch:
  pull_request:

jobs:
  build_and_package:
    name: Build on ${{ matrix.os }} for ${{ matrix.target }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          # Linux Build
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-latest
            rust_toolchain: stable
            artifact_name: telnet-rs-linux-x64
            archive_format: tar.gz
          # Windows Build
          - target: x86_64-pc-windows-msvc
            os: windows-latest
            rust_toolchain: stable
            artifact_name: telnet-rs-windows-x64
            archive_format: zip
          # Add other targets here if needed
          # - target: x86_64-apple-darwin
          #   os: macos-latest
          #   rust_toolchain: stable
          #   artifact_name: telnet-rs-macos-x64
          #   archive_format: tar.gz


    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Install Rust Toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ matrix.rust_toolchain }}
          target: ${{ matrix.target }}
          profile: minimal
          override: true

      # Potresti dover installare dipendenze specifiche per il target qui

      - name: Build Release
        run: |
          cargo build --release --target ${{ matrix.target }}

      # --- Step per packaging su Linux/macOS (usando tar) ---
      - name: Package Artefacts (tar.gz)
        if: runner.os != 'Windows'
        shell: bash
        run: |
          ARTIFACT_DIR="target/${{ matrix.target }}/release"
          APP_NAME="telnet-rs"

          cd "${ARTIFACT_DIR}"

          FILE_TO_ARCHIVE="${APP_NAME}"

          if [ ! -f "$FILE_TO_ARCHIVE" ]; then
             echo "Error: Binary '$FILE_TO_ARCHIVE' not found in $ARTIFACT_DIR."
             exit 1
          fi

          ARCHIVE_FILE="../../..//${{ matrix.artifact_name }}.${{ matrix.archive_format }}"
          tar -czvf "$ARCHIVE_FILE" "$FILE_TO_ARCHIVE"

          echo "Created archive: ${ARCHIVE_FILE}"

      # --- Step per packaging su Windows (usando Compress-Archive) ---
      - name: Package Artefacts (zip)
        if: runner.os == 'Windows'
        shell: powershell
        run: |
          $ARTIFACT_DIR = "target\${{ matrix.target }}\release"
          $APP_NAME = "telnet-rs"
          $FILE_TO_ARCHIVE = Join-Path -Path $ARTIFACT_DIR -ChildPath "${APP_NAME}.exe"

          if (-not (Test-Path $FILE_TO_ARCHIVE)) {
             Write-Host "Error: Binary '$FILE_TO_ARCHIVE' not found."
             exit 1
          }

          $ARCHIVE_FILE = "${{ matrix.artifact_name }}.${{ matrix.archive_format }}"

          Compress-Archive -Path $FILE_TO_ARCHIVE -DestinationPath $ARCHIVE_FILE

          Write-Host "Created archive: $ARCHIVE_FILE"

      # --- Step per caricare l'artefatto ---
      - name: Upload Artefact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.artifact_name }}
          path: ${{ matrix.artifact_name }}.${{ matrix.archive_format }}
          # retention-days: 7

  # Job separato per creare la release e caricare gli artefatti
  create_release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: build_and_package

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Download all build artefacts
        uses: actions/download-artifact@v4
          # Downloads into subdirectories named after the artifact names

      - name: List downloaded files (for debugging)
        run: |
          ls -R

      - name: Create Release and Upload Assets
        uses: houseabsolute/actions-rust-release@v0
        with:
          executable-name: telnet-rs
          # --- Parametro richiesto dall'action ---
          archive-name: | # Specifica i nomi base degli archivi che ti aspetti di allegare
            telnet-rs-linux-x64
            telnet-rs-windows-x64
            # Aggiungi qui altri nomi di artefatti se aggiungi target
            # telnet-rs-macos-x64
          # ------------------------------------

          skip_build: true
          skip_test: true
          skip_upload: false
          github_token: ${{ secrets.GITHUB_TOKEN }}
          # Il pattern 'files' aiuta l'action a trovare i file scaricati,
          # anche se l'action ora "sa" quali nomi di archivi cercare.
          files: |
            telnet-rs-linux-x64/*
            telnet-rs-windows-x64/*
          # Aggiungi qui altri pattern se aggiungi target
          # telnet-rs-macos-x64/*